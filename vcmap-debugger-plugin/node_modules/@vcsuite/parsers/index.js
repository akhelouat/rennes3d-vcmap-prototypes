
/**
 * Parses an integer number
 * @param {*} value
 * @param {number|null|undefined} defaultValue
 * @returns {number|null|undefined}
 */
export function parseInteger(value, defaultValue) {
  if (value != null) {
    const parsedValue = Number.parseInt(String(value), 10);
    if (parsedValue != null && !Number.isNaN(parsedValue)) {
      return parsedValue;
    }
  }
  return defaultValue;
}

/**
 * Parses a number
 * @param {string|number|null|undefined} value
 * @param {number|null|undefined} defaultValue
 * @returns {number|null|undefined}
 */
export function parseNumber(value, defaultValue) {
  if (value != null) {
    const parsedValue = Number.parseFloat(String(value));
    if (parsedValue != null && !Number.isNaN(parsedValue)) {
      return parsedValue;
    }
  }
  return defaultValue;
}

/**
 * Parses a float within a specific range
 * @param {string|number|null|undefined} value
 * @param {number} defaultValue
 * @param {number} min
 * @param {number} max
 * @returns {number}
 */
export function parseNumberRange(value, defaultValue, min, max) {
  const parsedValue = parseNumber(value, defaultValue);

  if (parsedValue < min) {
    return min;
  }
  if (parsedValue > max) {
    return max;
  }
  return parsedValue;
}

/**
 * Parses a boolean value from an arbitrary datatype
 * @param {*} value
 * @param {boolean} defaultValue
 * @returns {boolean}
 */
export function parseBoolean(value, defaultValue) {
  if (value == null) {
    return defaultValue;
  } else if (typeof value === 'boolean') {
    return value;
  } else if (value === 1) {
    return true;
  } else if (value === 0) {
    return false;
  } else if (typeof value === 'string' &&
    (value.toLowerCase() === 'true' || value.toLowerCase() === '1')) {
    return true;
  } else if (typeof value === 'string' &&
    (value.toLowerCase() === 'false' || value.toLowerCase() === '0')) {
    return false;
  }
  return defaultValue;
}


/**
 * checks if a value is a member of an enum otherwise returns the defaultValue.
 * Enums of type number or string
 * @template T
 * @param {*} value
 * @param {Object<T>} enumObject
 * @param {T} defaultValue
 * @returns {T}
 */
export function parseEnumValue(value, enumObject, defaultValue) {
  if (value != null) {
    const enumValue = Object.values(enumObject).find((entry) => {
      // eslint-disable-next-line eqeqeq
      return entry == value;
    });
    if (enumValue != null) {
      return enumValue;
    }
  }
  return defaultValue;
}

/**
 * checks if a key is a member of an enum and returns the enum Value otherwise returns the defaultValue.
 * @template T
 * @param {*} key
 * @param {Object<string,*>} enumObject
 * @param {T} defaultValue
 * @returns {T}
 */
export function parseEnumKey(key, enumObject, defaultValue) {
  if (key != null) {
    const enumKey = Object.keys(enumObject).find((entry) => {
      // eslint-disable-next-line eqeqeq
      return entry == key;
    });
    if (enumKey != null) {
      return enumObject[enumKey];
    }
  }
  return defaultValue;
}
