/* eslint-disable no-console */
import { LOG_LEVEL, LOG_RANGES } from './logLevels.js';
import Settings from './settings.js';

const consoleFn = new Map();
consoleFn.set(LOG_LEVEL.ERROR, 'error');
consoleFn.set(LOG_LEVEL.WARN, 'warn');
consoleFn.set(LOG_LEVEL.INFO, 'info');
consoleFn.set(LOG_LEVEL.DEBUG, 'log');

/**
 * Logger Class
 * @class
 */
class Logger {
  /**
   * @param {string=} className
   */
  constructor(className) {
    /**
     * class Name of the Object
     * @type {string}
     */
    this.className = className;

    /** @type {Map<string, (string|null)>} */
    this.deprecations = new Map();
  }

  /**
   * Logs an error message
   * @param {string} msg The message to log.
   * @param {...any} optArgs
   */
  error(msg, ...optArgs) {
    if (Settings.logLevel & LOG_RANGES.ERROR) {
      this._log(String(msg), LOG_LEVEL.ERROR, optArgs);
    }
  }

  /**
   * Logs a warning message
   * @param {string} msg The message to log.
   * @param {...any} optArgs
   */
  warning(msg, ...optArgs) {
    if (Settings.logLevel & LOG_RANGES.WARN) {
      this._log(String(msg), LOG_LEVEL.WARN, optArgs);
    }
  }

  /**
   * Deprecate a function. deprecations are stored on the logger
   * @param {string} functionName
   * @param {string=} alternativeFunctionName
   */
  deprecate(functionName, alternativeFunctionName) {
    const name = String(functionName);
    const alternative = alternativeFunctionName ? String(alternativeFunctionName) : null;
    if (!this.deprecations.has(name)) {
      this.deprecations.set(name, alternative || null);
      let msg = `${name} has been deprecated and will be removed`;
      if (alternative) {
        msg = `${msg}. ${alternative}`;
      }
      this.warning(msg);
    }
  }

  /**
   * Logs an info message
   * @param {string} msg The message to log.
   * @param {...any} optArgs
   */
  info(msg, ...optArgs) {
    if (Settings.logLevel & LOG_RANGES.INFO) {
      this._log(String(msg), LOG_LEVEL.INFO, optArgs);
    }
  }

  /**
   * Logs a debug message
   * @param {string} msg The message to log.
   * @param {...any} optArgs
   */
  debug(msg, ...optArgs) {
    if (Settings.logLevel & LOG_RANGES.DEBUG) {
      this._log(String(msg), LOG_LEVEL.DEBUG, optArgs);
    }
  }

  /**
   * Alias for debug
   * @param {string} msg The message to log.
   * @param {...any} optArgs
   */
  log(msg, ...optArgs) {
    if (Settings.logLevel & LOG_RANGES.DEBUG) {
      this._log(String(msg), LOG_LEVEL.DEBUG, optArgs);
    }
  }

  /**
   * Logs a message
   * @param {string} msg The message to log.
   * @param {LOG_LEVEL} level
   * @param {Array} optArgs
   * @private
   */
  _log(msg, level, optArgs) {
    let message = msg;
    if (this.className) {
      message = `[${this.className}] ${message}`;
    }
    if (Settings.useTimestamp) {
      const date = new Date(Date.now());
      message = `${date.toLocaleDateString()} ${date.toLocaleTimeString()} ${message}`;
    }
    console[consoleFn.get(level)](message, ...optArgs);
    if (level & LOG_LEVEL.ERROR) {
      console.group();
      console.trace();
      console.groupEnd();
    }
  }
}

export default Logger;
