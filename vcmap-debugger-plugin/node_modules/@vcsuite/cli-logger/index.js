const ora = require('ora');
const chalk = require('chalk');
const figures = require('figures');

const LOG_LEVEL = {
  OFF: 1,
  ERROR: 2,
  WARN: 4,
  INFO: 8,
  VERBOSE: 16,
  DEBUG: 16,
};

const LOG_RANGES = {};
LOG_RANGES[LOG_LEVEL.ERROR] = LOG_LEVEL.ERROR | LOG_LEVEL.WARN | LOG_LEVEL.INFO | LOG_LEVEL.VERBOSE;
LOG_RANGES[LOG_LEVEL.WARN] = LOG_LEVEL.WARN | LOG_LEVEL.INFO | LOG_LEVEL.VERBOSE;
LOG_RANGES[LOG_LEVEL.INFO] = LOG_LEVEL.INFO | LOG_LEVEL.VERBOSE;
LOG_RANGES[LOG_LEVEL.VERBOSE] = LOG_LEVEL.VERBOSE;

const logger = {
  /** @type {LOG_LEVEL} */
  _level: LOG_LEVEL.INFO,

  /**
   * @param {string} logLevel
   */
  setLevel(logLevel) {
    this._level = LOG_LEVEL[logLevel.toString().toLocaleUpperCase()] || this._level;
  },

  /**
   * @returns {LOG_LEVEL}
   */
  getLevel() {
    return this._level;
  },

  /**
   * @param {LOG_LEVEL} logLevel
   * @returns {boolean}
   */
  isLevel(logLevel) {
    return !!(this._level & LOG_RANGES[logLevel]);
  },

  /** @type {ora.Ora} */
  spinner: null,

  /**
   * @param {Function} fn
   * @param {Array<*>} args
   */
  pauseSpinner(fn, args) {
    if (this.isSpinning()) {
      this.spinner.stop();
      fn(...args);
      this.spinner.start();
    } else {
      fn(...args);
    }
  },

  /**
   * @param {...*} args
   */
  error(...args) {
    if (this.isLevel(LOG_LEVEL.ERROR)) {
      this.pauseSpinner(console.error, args);
    }
  },

  /**
   * @param {...*} args
   */
  warning(...args) {
    if (this.isLevel(LOG_LEVEL.WARN)) {
      this.pauseSpinner(console.warn, args);
    }
  },

  /**
   * @param {...*} args
   */
  log(...args) {
    if (this.isLevel(LOG_LEVEL.INFO)) {
      this.pauseSpinner(console.log, args);
    }
  },

  /**
   * @param {string} msg
   */
  info(msg) {
    if (this.isLevel(LOG_LEVEL.INFO)) {
      this.pauseSpinner(console.log, [chalk`{blue ${figures.pointerSmall}} ${msg}`]);
    }
  },

  /**
   * @param {string} msg
   */
  success(msg) {
    if (this.isLevel(LOG_LEVEL.INFO)) {
      this.pauseSpinner(console.log, [chalk`{green ${figures.tick}} ${msg}`]);
    }
  },

  /**
   * @param {string} msg
   */
  failure(msg) {
    if (this.isLevel(LOG_LEVEL.ERROR)) {
      this.pauseSpinner(console.error, [chalk`{red ${figures.cross}} ${msg}`]);
    }
  },

  /**
   * @param {...*} args
   */
  debug(...args) {
    if (this.isLevel(LOG_LEVEL.VERBOSE)) {
      this.pauseSpinner(console.log, args);
    }
  },

  /**
   * @param {string} text
   * @param {ora.Options} options
   */
  spin(text, options = {}) {
    if (this.isLevel(LOG_LEVEL.INFO)) {
      if (!this.spinner) {
        this.spinner = ora({ text, ...options }).start();
      } else {
        this.spinner.text = text;
      }
    }
  },

  stopSpinner() {
    if (this.isSpinning()) {
      this.spinner.stop();
      this.spinner = null;
    }
  },

  isSpinning() {
    return this.spinner && this.spinner.isSpinning;
  },
};

module.exports = {
  LOG_LEVEL,
  logger,
};
