/**
 * @param {Object<string, string>} imports
 * @returns {string}
 */
function writeImportMap(imports) {
  const importMap = Object.entries(imports)
    .map(([importName, usedName]) => `${importName} as ${usedName}`)
    .join(', ');

  return `import { ${importMap} } from 'ol';`;
}

/**
 * @param {string} from
 * @returns {string}
 */
function getModuleFromImport(from) {
  const module = from
    .replace(/\.js$/, '')
    .split('/')
    .join('$');

  return `ol$${module}`;
}

/**
 * @param {string} importee
 * @param {string} from
 * @returns {string}
 */
function reWriteImports(importee, from) {
  const module = getModuleFromImport(from);
  return writeImportMap({ [module]: importee.trim() });
}

/**
 * @param {string} importees
 * @param {string} from
 * @returns {string}
 */
function rewriteNamedImports(importees, from) {
  const imports = {};
  const module = getModuleFromImport(from);

  importees
    .trim()
    .split(',')
    .filter(i => i) // strip trailing comma in multiline imports
    .forEach((namedImport) => {
      let usedName = namedImport;
      let importName = namedImport;
      if (/.*\sas\s.*/.test(namedImport)) {
        [, importName, usedName] = namedImport.match(/(.*)\sas\s(.*)/);
      }

      importName = importName.trim();
      importName = importName === 'default' ? module : `${module}$${importName}`;
      imports[importName] = usedName.trim();
    });

  return writeImportMap(imports);
}

export default function rollupPluginVcsOl() {
  return {
    name: 'vcs-ol',
    transform(source) {
      return source
        .replace(
          /import\s*{([^}]+)}\s*from\s*['"]ol\/(.*)["'];?/gm,
          (match, importees, from) => rewriteNamedImports(importees, from),
        )
        .replace(
          /import\s*([^{}"';]*)\s*from\s*['"]ol\/(.*)["'];?/g,
          (match, importee, from) => reWriteImports(importee, from),
        );
    },
  };
}
